package license

import "time"

// Generator do genereate licenses that is encoded into a JWT
//
// The JWT is defined in https://tools.ietf.org/html/rfc7797 and
// it's best practices is defined in https://tools.ietf.org/html/rfc8725,
// of the base RFC https://tools.ietf.org/html/rfc7519.
//
// The `Generator` without a `JWTSignerCreator` is only able to generate
// _JSON_ when doing `Create`. If a `JWTSignerCreator` is assigned it
// will return a proper _JWT_.
type Generator interface {
	// Error will return the last error, if any.
	Error() error
	// ClearError will clear any error that is present
	ClearError()
	// Audience sets the default audience
	Audience(aud string)
	// Issuer sets the default issuer
	Issuer(iss string)
	// LicenseLength sets the default length gives "now + t = expires" in
	// unix 32 bit epoch format.
	LicenseLength(t time.Duration)
	// ClientID sets the default client id
	ClientID(id string)
	// ClientSecret sets the default secret.
	ClientSecret(secret string)
	// CreateFeatureInfo creates a `license.FeatureInfo` with default
	// values set.
	//
	// Caller needs to update the `FeatureInfo` before calling `Create()`.
	CreateFeatureInfo() *FeatureInfo
	// SetSignerCreator enables signing and generaton of a proper _JWT_ when
	// invoking the `Create(*FeatureInfo)` in this instance.
	SetSignerCreator(creator JWTSignerCreator)
	// Create generates a new license.
	Create(info *FeatureInfo) string
}

// JWTSignerCreator is the one actually does the generation of _JWT_ and
// signs the payload generated by the `Generator`.
//
// The `Generator` do have one `JWTSignerCreator` assigned to it in order
// to function properly.
type JWTSignerCreator interface {
	// SignCreate will Create a _JWT_ from the _info_ parameter and sign it.
	// The returned string is a proper signed _JWT_.
	SignCreate(info *FeatureInfo) (string, error)
}
